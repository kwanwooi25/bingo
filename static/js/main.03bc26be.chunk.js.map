{"version":3,"sources":["utils/generatePlayers.js","utils/checkBingos.js","store/game.js","containers/Header.js","components/Tile.js","components/Board.js","containers/Boards.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["playersCount","players","i","numbers","_","range","sort","Math","random","board","chunk","map","row","value","checked","complete","push","name","totalComplete","completeLines","player","checkedNumbers","rows","cols","leftdiagonal","rightdiagonal","total","INDEX","forEach","a","rowComplete","every","b","includes","colComplete","line","isLineExists","newBoard","rowIndex","col","colIndex","isRowComplete","isColComplete","isLeftDiagonalComplete","isRightDiagonalComplete","current","existing","some","START_GAME","PASS_TURN","startGame","type","passTurn","checkedNumber","initialState","isPlaying","currentTurn","generatePlayers","resultMessage","Header","useSelector","game","dispatch","useDispatch","className","onClick","Tile","number","isActive","isChecked","isComplete","onClickNumber","disabled","Board","boardTitleClass","completeLinesTitleClass","completeLinesClass","index","key","Boards","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","state","action","checkBingos","winners","filter","length","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03bc26be.chunk.js","sourcesContent":["import _ from 'lodash'\n\nexport default (playersCount) => {\n  let players = []\n\n  for (let i = 0; i < playersCount; i++) {\n    const numbers = _.range(1, 26).sort(() => 0.5 - Math.random())\n    const board = _.chunk(numbers, 5).map(row => (\n      row.map(value => ({\n        value,\n        checked: false,\n        complete: false,\n      }))\n    ))\n    players.push({\n      name: `${i + 1}P`,\n      totalComplete: 0,\n      completeLines: [],\n      board,\n    })\n  }\n\n  return players\n}","import _ from 'lodash'\n\n/**\n * [0, 0] [1, 0] [2, 0] [3, 0] [4, 0]\n * [0, 1] [1, 1] [2, 1] [3, 1] [4, 1]\n * [0, 2] [1, 2] [2, 2] [3, 2] [4, 2]\n * [0, 3] [1, 3] [2, 3] [3, 3] [4, 3]\n * [0, 4] [1, 4] [2, 4] [3, 4] [4, 4]\n *\n * 빙고가 되는 경우\n * 1. 같은 행의 모든 숫자가 선택되었을 경우 (가로)\n * 2. 같은 열의 모든 숫자가 선택되었을 경우 (세로)\n * 3-1. 좌측 대각선: '행 === 열' 인 경우\n * 3-2. 우측 대각선: '행 + 열 === 4' 인 경우\n */\n\nexport default (player, checkedNumbers) => {\n  const { completeLines = [], board } = player\n\n  let rows = []\n  let cols = []\n  let leftdiagonal = true\n  let rightdiagonal = true\n  let total = 0\n\n  const INDEX = _.range(0, 5)\n  INDEX.forEach(a => {\n    const rowComplete = INDEX.every(b => {\n      return checkedNumbers.includes(board[a][b].value)\n    })\n    const colComplete = INDEX.every(b => {\n      return checkedNumbers.includes(board[b][a].value)\n    })\n    leftdiagonal = leftdiagonal && checkedNumbers.includes(board[a][a].value)\n    rightdiagonal = rightdiagonal && checkedNumbers.includes(board[a][4-a].value)\n\n    if (rowComplete) {\n      rows.push(a)\n      total++\n      const line = INDEX.map(b => board[a][b].value)\n      if (!isLineExists(line, completeLines)) completeLines.push(line)\n    }\n    if (colComplete) {\n      cols.push(a)\n      total++\n      const line = INDEX.map(b => board[b][a].value)\n      if (!isLineExists(line, completeLines)) completeLines.push(line)\n    }\n  })\n\n  if (leftdiagonal) {\n    total++\n    const line = INDEX.map(a => board[a][a].value)\n    if (!isLineExists(line, completeLines)) completeLines.push(line)\n  }\n  if (rightdiagonal) {\n    total++\n    const line = INDEX.map(a => board[a][4-a].value)\n    if (!isLineExists(line, completeLines)) completeLines.push(line)\n  }\n\n  // 각 타일의 상태값 업데이트 후 반환\n  const newBoard = board.map((row, rowIndex) => {\n    return row.map((col, colIndex) => {\n      const checked = checkedNumbers.includes(col.value)\n      const isRowComplete = rows.includes(rowIndex)\n      const isColComplete = cols.includes(colIndex)\n      const isLeftDiagonalComplete = leftdiagonal && rowIndex === colIndex\n      const isRightDiagonalComplete = rightdiagonal && rowIndex + colIndex === 4\n\n      return {\n        value: col.value,\n        checked,\n        complete: (\n          isRowComplete ||\n          isColComplete ||\n          isLeftDiagonalComplete ||\n          isRightDiagonalComplete\n        )\n      }\n    })\n  })\n\n  return {\n    ...player,\n    totalComplete: total,\n    completeLines,\n    board: newBoard,\n  }\n}\n\n/** Private Helper */\nconst isLineExists = (current, existing) => {\n  return existing.some(line => line.every(value => current.includes(value)))\n}","import generatePlayers from '../utils/generatePlayers'\nimport checkBingos from '../utils/checkBingos'\n\n/** Action Types */\nconst START_GAME = 'game/START_GAME'\nconst PASS_TURN = 'game/PASS_TURN'\n\n/** Actions */\nexport const startGame = () => ({ type: START_GAME })\nexport const passTurn = (checkedNumber) => ({\n  type: PASS_TURN,\n  checkedNumber,\n})\n\n/** State */\nconst initialState = {\n  playersCount: 2,\n  isPlaying: false,\n  currentTurn: 1, // 최대값 = playersCount\n  checkedNumbers: [],\n  players: generatePlayers(2),\n  resultMessage: '',\n}\n\n/** Reducer */\nexport default function game(state = initialState, action) {\n  switch (action.type) {\n    case START_GAME:\n      return {\n        ...state,\n        isPlaying: true,\n        currentTurn: 1,\n        checkedNumbers: [],\n        players: generatePlayers(state.playersCount),\n        resultMessage: '',\n      }\n\n    case PASS_TURN:\n      const checkedNumbers = [\n        ...state.checkedNumbers,\n        action.checkedNumber\n      ]\n\n      const players = state.players\n        .map(player => checkBingos(player, checkedNumbers))\n\n      const winners = players.filter(({ totalComplete }) => totalComplete >= 5)\n      const resultMessage = winners.length >= 2\n        ? '무승부 입니다.' : winners.length === 1\n        ? `${winners[0].name}가 빙고를 완성했습니다.` : ''\n\n      return {\n        ...state,\n        currentTurn: state.currentTurn === state.playersCount\n          ? 1\n          : state.currentTurn + 1,\n        checkedNumbers,\n        players,\n        isPlaying: !resultMessage,\n        resultMessage,\n      }\n\n    default:\n      return state\n  }\n}","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { startGame } from '../store/game'\nimport './Header.scss'\n\nfunction Header() {\n  const {\n    isPlaying,\n    resultMessage,\n  } = useSelector(({ game }) => ({\n    isPlaying: game.isPlaying,\n    resultMessage: game.resultMessage,\n  }))\n  const dispatch = useDispatch()\n\n  const onClickStartGame = () => dispatch(startGame())\n\n  return (\n    <header className=\"header\">\n      <h1>빙고!</h1>\n      {(isPlaying || !resultMessage) && (\n        <button onClick={onClickStartGame}>\n          {isPlaying ? '게임 재시작' : '게임 시작'}\n        </button>\n      )}\n    </header>\n  )\n}\n\nexport default Header","import React from 'react'\nimport './Tile.scss'\n\nfunction Tile({\n  number,\n  isActive,\n  isChecked,\n  isComplete,\n  isPlaying,\n  onClickNumber,\n}) {\n  const disabled = !isActive || isChecked\n\n  let className = 'tile'\n  if (isActive || !isPlaying) className += ' active'\n  if (isChecked) className += ' checked'\n  if (isComplete) className += ' complete'\n\n  return (\n    <button\n      className={className}\n      disabled={disabled}\n      onClick={() => onClickNumber(number)}\n    >\n      {number}\n    </button>\n  )\n}\n\nexport default Tile","import React from 'react'\nimport Tile from './Tile'\nimport './Board.scss'\n\nfunction Board({\n  isPlaying,\n  player,\n  isActive,\n  onClickNumber,\n}) {\n  const { name, totalComplete, completeLines = [], board } = player\n\n  let boardTitleClass = 'board-title'\n  let completeLinesTitleClass = 'complete-lines-title'\n  let completeLinesClass = 'complete-lines'\n  if (isActive) {\n    boardTitleClass += ' active'\n    completeLinesTitleClass += ' active'\n    completeLinesClass += ' active'\n  }\n\n  return (\n    <div className=\"board-container\">\n      <h2 className={boardTitleClass}>{name}</h2>\n\n      <div className=\"board\">\n        {board.map((row, index) => (\n          <div key={index} className=\"board__row\">\n            {row.map(({ value, checked, complete }) => (\n              <Tile\n                key={value}\n                number={value}\n                isActive={isActive}\n                isChecked={checked}\n                isComplete={complete}\n                isPlaying={isPlaying}\n                onClickNumber={onClickNumber}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      <div className={completeLinesTitleClass}>\n        <h4>완성 줄 목록</h4>\n        <span>{totalComplete}줄 완성</span>\n      </div>\n\n      <div className={completeLinesClass}>\n        {completeLines.map((line, index) => (\n          <div key={index} className=\"complete-lines__row\">\n            {line.map(value => (\n              <span key={value} className=\"complete-lines__col\">\n                {value}\n              </span>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Board","import React from 'react'\nimport Board from '../components/Board'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { startGame, passTurn } from '../store/game'\nimport './Boards.scss'\n\nfunction Boards() {\n  const {\n    isPlaying,\n    players,\n    currentTurn,\n    resultMessage,\n  } = useSelector(({ game }) => ({\n    isPlaying: game.isPlaying,\n    players: game.players,\n    currentTurn: game.currentTurn,\n    resultMessage: game.resultMessage,\n  }))\n  const dispatch = useDispatch()\n\n  const onConfirmResult = () => dispatch(startGame())\n  const onClickNumber = (number) => dispatch(passTurn(number))\n\n  return (\n    <div>\n      {!!resultMessage && (\n        <div className=\"result-modal-container\">\n          <div className=\"result-modal\">\n            <p>{resultMessage}</p>\n            <button onClick={onConfirmResult}>\n              확인\n            </button>\n          </div>\n        </div>\n      )}\n      <div className=\"boards\">\n        {players.map((player, index) => (\n          <Board\n            key={index}\n            isPlaying={isPlaying}\n            player={player}\n            isActive={index + 1 === currentTurn && isPlaying}\n            onClickNumber={onClickNumber}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Boards","import React from 'react'\nimport './App.scss'\nimport Header from './containers/Header'\nimport Boards from './containers/Boards'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <Boards />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux'\nimport game from './game'\n\nconst rootReducer = combineReducers({\n  game,\n})\n\nexport default rootReducer","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './store'\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}